import json
import pandas as pd
import re
import control_variables
from datetime import datetime as date

## TODO ADD WAY TO SELECT BETWEEN CB AND HSB LATER

def createNewDeviceModel(device_prop):
    '''
    Create a new device model based on the property that was given in 
    the device_prop in the device_model.json used in the reference app
    input:
    property (str): name of property to create new devices for
    '''
    # opens json containing list of sensor properties
    with open("CBdata.json") as jsonFile:
        CBdata = json.load(jsonFile)
        jsonFile.close()
    
    # open CSV file containing descriptive details of properties for use in device mode creation
    reference = pd.read_csv("RsData.csv")

    # check if property given exists in both files
    flag = False
    if device_prop not in CBdata:
        print("Property not found in list of exsting Building Sensor Properties cancelling model creation")
        return
    test = reference.loc[reference['Property'] == device_prop]
    if test.empty:
        print("Property is not found in List of acceptable sensor Properties")
        return

    # open device-models json
    with open(control_variables.json_path + "\\device-models.json", "r") as jsonFile:
        device_models = json.load(jsonFile)
        jsonFile.close()
    
    # if device-model for property already exists, stop here
    for model in device_models:
        if device_prop + "_AutoSensor" == model["deviceModelId"]:
            print("Device with property {} already exists, cancelling creation".format(device_prop))
            return
    # create new device model and append to json
    new_device = {}
    new_device["deviceModelId"] = device_prop + "_AutoSensor"
    new_device["deviceModelName"] = device_prop + " Auto Generated Sensor Model"
    new_device["deviceModelDesc"] = "Automatically generated sensor for the value " + device_prop
    propertyDict = [{
                    "propertyId":device_prop, 
                    "propertyName": "Blank", 
                    "propertyDesc": test["Description"].values[0],
                    "propertyType": test["Type"].values[0],
                    "propertyUnit": test["Unit"].values[0],
                    "rangeMin": test["rangeMin"].values[0],
                    "rangeMax": test["rangeMax"].values[0]
                }]
    new_device["deviceProperties"] = propertyDict
    device_models.append(new_device)

    # write new data in to json file
    with open(control_variables.json_path + "\\device-models.json", "r+") as jsonFile:
        json.dump(device_models, jsonFile, indent = 4)
    

def create_Device(csv_name,room_name,device_json,property, position):
    for device in device_json["deviceInfo"]:
        if csv_name + "_" in device["id"]:
            print("Device for property {p} room {b} already exists".format(p=property,b = room_name))
            return
    now = date.now()
    nowString = now.strftime("%Y-%m-%dT%H:%M:%S")
    new_dev = {"id": csv_name + "_" + property,
               "name": room_name + " " + device_json["deviceModelId"],
               "position": {"x": str(position["x"]),
                            "y": str(position["y"]),
                            "z": str(position["z"])
                            },
               "lastActivityTime": nowString+"Z"
            }
    device_json["deviceInfo"].append(new_dev)
    


def update_Devices_Json(property):
    '''
    This function creates devices in the devices.json file based on the property given

    input:
    property (str): name of property to create new devices for

    '''
    # json string with the position of all of the rooms
    with open("CBjson.txt", "r") as jsonFile:
        jsonstring = json.load(jsonFile)
        RoomPositionJson = json.loads(jsonstring)
        jsonFile.close()

    with open("CBdata.json") as jsonFile:
        CBdata = json.load(jsonFile)
        jsonFile.close()

    with open(control_variables.json_path + "\\device-models.json", "r") as jsonFile:
        device_models = json.load(jsonFile)
        jsonFile.close
    
    # check that an autogenerated model exists for the property exisits in the device-model json
    # if device model doesn't exist, stop device creation
    model_exisits_flag = False
    for model in device_models:
        if (property + "_AutoSensor" == model["deviceModelId"]):
            model_exisits_flag = True
            break
    if not model_exisits_flag:
        print("Property {} does not have a auto generated device model, cancelling creation".format(property))
        return

    # get list of rooms with the desired property from the data json. ie for "LUX_TL" there is [CB_RM4202, CB_RM4205,...]
    flag = False
    for key in CBdata.keys():
        if (property == key):
            flag = True
            rooms = CBdata[key]
    if not flag:
        print("Property {} does not exist in list of available properties, cancelling creation".format(property))
        return

    with open(control_variables.json_path + "\\devices.json", "r") as jsonFile:
        device_json = json.load(jsonFile)

    # find location of device model in device json []
    device_json_already_exist = False
    for position,model_list in enumerate(device_json):
        if model["deviceModelId"] == model_list["deviceModelId"]:
            device_json_already_exist = True
            break
    # if device model isn't listed in the devices json, add it to the json
    if not device_json_already_exist:
        device_json.append(
                            {"deviceModelId":model["deviceModelId"],
                                "deviceInfo": []
                            })
        position = -1
    # for each room, get the room number
    for place in rooms:
        number = re.search('\d+[a-zA-Z]?',place).group()
        # then using the room number get it's position in the model
        for name in RoomPositionJson.keys():
            short_name = re.sub("\[\d+\]",'',name)
            if number in short_name:
                print(name)
                print(RoomPositionJson[name])
                # create a new device and add it to the json
                create_Device(place,short_name,device_json[position], property, RoomPositionJson[name])
    with open(control_variables.json_path + "\\devices.json", "r+") as jsonFile:
        json.dump(device_json, jsonFile, indent = 4)
    

def main():
    prop = input("Enter property to create devices for:")
    createNewDeviceModel(prop)
    update_Devices_Json(prop)

if __name__ == "__main__":
    main()